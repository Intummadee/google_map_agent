# 1Ô∏è‚É£ ‡∏™‡πà‡∏ß‡∏ô Import Library
import folium
import streamlit as st
import random
import heapq
import json
import streamlit.components.v1 as components

def interpolate_position(start, end, fraction):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á start ‡∏Å‡∏±‡∏ö end ‡∏ï‡∏≤‡∏° fraction (0-1)
       ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô [lat, lon]"""
    return [
        start[0] + (end[0] - start[0]) * fraction,
        start[1] + (end[1] - start[1]) * fraction
    ]

def reconstruct_path(came_from, current):
    path = [current]
    while current in came_from:
        current = came_from[current]
        path.append(current)
    return path[::-1]

# 2Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
def heuristic(a, b):
    return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5


def a_star_search(graph, start, goal):
    open_set = []
    heapq.heappush(open_set, (0, start))
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    f_score = {node: float('inf') for node in graph}
    f_score[start] = heuristic(start, goal)

    while open_set:
        _, current = heapq.heappop(open_set)
        if current == goal:
            return reconstruct_path(came_from, current)

        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, goal)
                heapq.heappush(open_set, (f_score[neighbor], neighbor))

    return []


# 3Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô create_map(...) ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
def create_map(station_locations, full_paths, positions_over_time, station_bikes):
    m = folium.Map(location=[13.728, 100.775], zoom_start=15) # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà

    # for station in station_locations:
    #     folium.Marker(
    #         location=station,
    #         icon=folium.Icon(color='green', icon="info-sign"),
    #         popup="Station"
    #     ).add_to(m)


    #! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà 
    for station, bikes in zip(station_locations, station_bikes):
        folium.Marker(
            location=station,
            icon=folium.Icon(color='green', icon="info-sign"),
            popup=f"Station: {station}<br>Bikes Available: {bikes}"
        ).add_to(m)

    for path in full_paths:
        folium.PolyLine(path, color='yellow', weight=2).add_to(m)

    agents_positions_json = json.dumps(positions_over_time) # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ agents_positions_json ‡πÄ‡∏Å‡πá‡∏ö ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á agent ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    map_var = m.get_name()

    custom_js = f"""
    <script>
    window.addEventListener('load', function() {{
        console.log("Agents positions:", {agents_positions_json});

        var redIcon = L.icon({{
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        }});

        var agentsPositions = {agents_positions_json};
        var markers = [];
        var mapObj = window["{map_var}"];

        var timeStep = 0;
        var maxStep = agentsPositions[0].length;
        var interval = null;

        function updateMarkers() {{
            for (var i = 0; i < markers.length; i++) {{
                markers[i].setLatLng(agentsPositions[i][timeStep]);
            }}
            document.getElementById("timeStepDisplay").innerText = "Time Step: " + timeStep;
        }}

        function startAnimation() {{
            if (!interval) {{
                interval = setInterval(function() {{
                    if (timeStep < maxStep - 1) {{
                        timeStep++;
                        updateMarkers();
                    }} else {{
                        clearInterval(interval);
                        interval = null;
                    }}
                }}, 100);
            }}
        }}

        function pauseAnimation() {{
            clearInterval(interval);
            interval = null;
        }}

        function resetAnimation() {{
            pauseAnimation();
            timeStep = 0;
            updateMarkers();
        }}

        for (var i = 0; i < agentsPositions.length; i++) {{
            var marker = L.marker(agentsPositions[i][0], {{icon: redIcon}}).addTo(mapObj);
            markers.push(marker);
        }}

        document.getElementById("startBtn").addEventListener("click", startAnimation);
        document.getElementById("pauseBtn").addEventListener("click", pauseAnimation);
        document.getElementById("resetBtn").addEventListener("click", resetAnimation);

        updateMarkers();
    }});
    </script>
    """

    control_html = """
    <div style="text-align:center; margin-top: 10px;">
        <button id="startBtn">Start</button>
        <button id="pauseBtn">Pause</button>
        <button id="resetBtn">Reset</button>
        <p id="timeStepDisplay">Time Step: 0</p>
    </div>
    """

    m.get_root().html.add_child(folium.Element(control_html + custom_js))
    return m



# 4Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô run_simulation() ‚Üí ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á
def run_simulation():
    num_persons = st.session_state.num_persons
    max_time_step = st.session_state.max_time_step
    num_bikes_per_station = st.session_state.num_bikes


    # üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô
    station_locations = [
        (13.7279, 100.7707),
        (13.7277, 100.7644),
        (13.7295, 100.7750),
        (13.7296, 100.7800),
        (13.7307, 100.7809),
        (13.7265, 100.7752),
        (13.7292, 100.7774)
    ]

    min_lat = min(x[0] for x in station_locations)
    max_lat = max(x[0] for x in station_locations)
    min_lon = min(x[1] for x in station_locations)
    max_lon = max(x[1] for x in station_locations)


    # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    start_positions = [
        (random.uniform(min_lat, max_lat), random.uniform(min_lon, max_lon))
        for _ in range(num_persons)
    ]
    destination_positions = [
        (random.uniform(min_lat, max_lat), random.uniform(min_lon, max_lon))
        for _ in range(num_persons)
    ]

    #! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà 
    graph = {}
    for i, station in enumerate(station_locations):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        graph[station] = {}  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
        for j, neighbor in enumerate(station_locations):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏≠‡∏∑‡πà‡∏ô
            if i != j:  # ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (self-loop)
                dist = heuristic(station, neighbor)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
                graph[station][neighbor] = dist  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô edges ‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü


    station_bikes = [num_bikes_per_station] * len(station_locations)

    # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô 
    full_paths = []
    for person_pos, dest_pos in zip(start_positions, destination_positions):
        # Find paths for person
        # ‡∏´‡∏≤ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        # route = [person_pos, dest_pos]
        # full_paths.append(route)


        #! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà 
        # ‡∏´‡∏≤ station ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡πÄ‡∏ä‡πà‡∏≤ ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤ station_bikes ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0 ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å station ‡∏≠‡∏∑‡πà‡∏ô
        available_stations = [
            station for station, bikes in zip(station_locations, station_bikes) if bikes > 0
        ] # available_stations: ‡πÉ‡∏ä‡πâ list comprehension ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô (bikes > 0) ‡∏≠‡∏¢‡∏π‡πà

        if not available_stations:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô (available_stations ‡∏ß‡πà‡∏≤‡∏á)
            # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á agent
            # ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß"
            # ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö person_pos ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô
            start_station = min(station_locations, key=lambda station: heuristic(person_pos, station))
            end_station = min(station_locations, key=lambda station: heuristic(dest_pos, station))
        else:
            start_station = min(available_stations, key=lambda station: heuristic(person_pos, station))
            end_station = min(available_stations, key=lambda station: heuristic(dest_pos, station))

        # # ‡∏´‡∏≤ station ‡πÉ‡∏Å‡∏•‡πâ des
        # end_station = min(station_locations, key=lambda station: heuristic(dest_pos, station))
        

        
        # ‡∏£‡∏ß‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‚Üí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏ä‡πà‡∏≤ ‚Üí (‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ A* Search) ‚Üí ‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
        complete_path = [person_pos]  # ‡∏à‡∏∏‡∏î‡πÄ‡∏Å‡∏¥‡∏î
        complete_path.append(start_station)  # ‡πÑ‡∏õ sta ‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î
        complete_path.extend(a_star_search(graph, start_station, end_station))  # ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏ä‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
        complete_path.append(dest_pos)  # ‡πÑ‡∏õ des
        
        full_paths.append(complete_path)

        # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà)
        station_index = station_locations.index(start_station)
        if station_bikes[station_index] > 0:
            station_bikes[station_index] -= 1


    print(f"station_bikes : {station_bikes}") # station_bikes : [8, 10, 9, 8, 10, 10, 10]


    # üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á agent ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°
    positions_over_time = [[] for _ in range(num_persons)]
    for step in range(max_time_step + 1):
        for i, path in enumerate(full_paths):
            positions_over_time[i].append(interpolate_position(path[0], path[1], step / max_time_step))

    # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Streamlit
    traffic_map = create_map(station_locations, full_paths, positions_over_time, station_bikes)
    st.write("### Traffic Simulation Map")
    components.html(traffic_map._repr_html_(), height=600)


# 5Ô∏è‚É£ ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï Streamlit
st.title("Traffic Simulation with Start/Pause/Reset")
st.number_input("Number of Agents:", min_value=1, value=5, key='num_persons')
st.number_input("Max Time Steps:", min_value=1, value=100, key='max_time_step')
st.number_input("Number of Bikes per Station:", min_value=1, value=10, key='num_bikes')

if st.button("Run Simulation"):
    run_simulation()
